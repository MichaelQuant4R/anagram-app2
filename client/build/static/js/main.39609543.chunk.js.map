{"version":3,"sources":["components/Anagram.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Anagram","props","React","useState","inputText","setInputText","outputText","setOutputText","inputList","setInputList","inputCount","setInputCount","outputCount","setOutputCount","text","document","getElementById","JSON","stringify","onSubmit","e","console","log","preventDefault","mylist","split","length","fetch","method","mode","headers","body","then","resp","ok","json","Error","status","data","count","i","catch","error","id","type","required","placeholder","onChange","target","value","onClick","className","map","input","outList","out","k","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.39609543.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/anagram.css\";\n\nconst Anagram = props => {\n    \n    const [inputText, setInputText] = React.useState(\"\");\n    const [outputText, setOutputText] = React.useState([]);\n    const [inputList, setInputList] = React.useState([]);\n     const [inputCount, setInputCount] = React.useState(0);\n    const [outputCount, setOutputCount] = React.useState(0);\n    \n    const text = document.getElementById(\"anagram-text-input\");\n    \n    \n    const handleReset = (e) => {\n        \n        setInputList([]);\n        \n        setInputText(\"\");\n        setOutputText([]);\n        console.log(text.value);\n        text.value = \"\";\n        setInputCount(0);\n       setOutputCount(0);\n    }\n    \n\n    \n    const handleSubmit = (e) => {\n        console.log(inputText);\n        e.preventDefault();\n        \n        let mylist = inputText.split(\" \");\n       \n        setInputList(mylist);\n        \n        setInputCount(mylist.length);\n        \n        fetch(\"https://holistic-anagram.herokuapp.com/anagram_check\",{\n            method:\"POST\",\n            mode:\"cors\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Access-Allow-Control-Origin\":\"*\"\n            },\n            \n            body:JSON.stringify({\n                \"words\": inputText\n            })\n            \n        })\n        .then(resp => {\n            \n            console.log(resp);\n            if(!resp.ok){\n                \n                throw new Error(resp.status);\n            }\n            else{\n                return resp.json();\n            }\n            \n        })\n        .then(json => {\n            \n            console.log(json);\n            \n            console.log(json[\"data\"][\"anagram\"]);\n            \n            console.log(\"INPUT TEXT LENGTH\", inputText.length);\n            console.log(inputText);\n//             setInputCount(inputText.length);\n            \n            let data = json[\"data\"][\"anagram\"];\n//             console.log(setOutputText);\n            \n            console.log(\"DATA\", data);\n            setOutputText(data);\n            \n            let count = 0;\n            for(var i = 0; i < data.length; i++){\n                count += data[i].length;\n            }\n            \n            setOutputCount(count);\n\n            \n            console.log(\"OUTPUT TEXT\", outputText);\n\n            \n            \n            console.log(\"OUTPUT\", outputText);\n        })\n        .catch(error => {\n            console.log(error);\n        });\n    }\n    \n    return (\n    \n    <>\n            <center>\n                <h1>Anagram App</h1>\n                \n                <div>{JSON.stringify({outputText})}</div>\n                <br/>\n      \n        <form onSubmit = {handleSubmit}>\n    \n            <br/>\n            <input id=\"anagram-text-input\" type=\"text\" required placeholder=\"Enter words to check...\"\n               onChange = {(e) => setInputText(e.target.value)} />\n            <br/>\n            \n    \n            <input type=\"submit\" value=\"Submit\"/>\n            <br/>\n            <input id=\"anagram-text-reset\" onClick={handleReset} type=\"button\" value=\"Reset\"/>\n            <br/>\n        </form>\n          \n                <div id=\"grid-container\">\n                \n                <div className=\"text-container\">\n                    <span className=\"text-title\">Input</span>\n                    <br/>\n                    <span className=\"text-count-input\">{inputCount}</span>\n                    <div className=\"text-container-list\">\n                        <br/>\n                       \n                        <ul>\n                        {inputList.map((input, i) => (\n                            <li key={i} className=\"input-li\">{input}</li>\n\n                            ))}\n                                </ul>\n                        \n                        </div>\n                    </div>\n                    \n                <div className=\"text-container\">\n                <span className=\"text-title\">Output</span>\n                    <br/>\n                    <span className=\"text-count-output\">{outputCount}</span>\n                 <div className=\"text-container-list\">\n                    <br/>\n        <div>\n        {outputText.map((outList,i) => (\n        <>\n         <ul key={i} className=\"output-div\">{outList.map((out, k) => (\n\n                 <li key={k} className=\"output-li\">{out}</li>\n\n                 ))}</ul>\n            <hr/>\n            </>\n         ))}\n        \n         </div>\n            </div>\n                </div>\n                    </div>\n                \n            </center>\n    </>\n    \n    );\n};\n\nexport default Anagram;\n\n\n\n\n\n\n","import Anagram from \"./components/Anagram\";\nfunction App() {\n  return (\n    <div className=\"App\">\n\n          \n   \n          <Anagram/>\n          \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}